(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{429:function(e,n,t){"use strict";t.r(n);var a=t(2),s=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("blockquote",[n("p",[e._v("未经允许禁止转载")])]),e._v(" "),n("p",[e._v("今天介绍几个经常被提到的设计模式，通俗易懂，包教包会\n"),n("a",{attrs:{href:"https://github.com/mmdctjj/good_good_study/tree/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码点击这里"),n("OutboundLink")],1)]),e._v(" "),n("h3",{attrs:{id:"单例模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[e._v("#")]),e._v(" 单例模式")]),e._v(" "),n("p",[e._v("单例模式的精髓就是不管一个构造函数被实例化多少次，全局只有一个实例")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const Singleton = (function () {\n    let instance;\n    function init () {\n        return new Object();\n    }\n    return function () {\n        if (!instance) {\n            instance = init();\n        }\n        return instance;\n    }\n})()\n\nlet mySingleton1 = new Singltron();\nlet mySingleton2 = new Singltron();\n\nconsole.log(mySing1 === mySing2) // true\n")])])]),n("p",[e._v("单例模式的本质就是共享同一个作用域链，很明显这是"),n("code",[e._v("JavaScript")]),e._v("的"),n("code",[e._v("闭包")]),e._v("机制实现的")]),e._v(" "),n("h3",{attrs:{id:"观察者模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[e._v("#")]),e._v(" 观察者模式")]),e._v(" "),n("p",[e._v("观察者模式主要是通过一个目标（Suject）维护一系列的观察者（Observer），当目标发生变化时，通过广播事件，将目标具体的变化通知所有的观察者")]),e._v(" "),n("p",[e._v("观察者模式主要由四个角色组成："),n("code",[e._v("目标（Suject）")]),e._v("、 "),n("code",[e._v("观察者（Observer）")]),e._v("、"),n("code",[e._v("具体目标")]),e._v("、"),n("code",[e._v("具体观察者")])]),e._v(" "),n("p",[e._v("下面的例子中，当"),n("code",[e._v("data")]),e._v("对象的"),n("code",[e._v("name")]),e._v("或者"),n("code",[e._v("age")]),e._v("属性发生变化时，都会对应的观察者会接受到变化")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Observer {\n    constructor (code) {\n        this.code = code;\n    }\n    update () {\n        console.log('我是：', this.code, '我知道我该更新了')\n    }\n}\n\nclass Suject {\n    constructor () {\n        this.observerList = [];\n    }\n    \n    addObserver (observer) {\n        this.observerList.push(observer)\n    }\n    \n    notify () {\n        this.observerList.map((observer) => observer.update())\n    }\n}\n\n// 具体的观察者\nconst concreteObservver1 = new Observer('concreteObservver1');\nconst concreteObservver2 = new Observer('concreteObservver2');\nconst concreteObservver3 = new Observer('concreteObservver3');\nconst concreteObservver4 = new Observer('concreteObservver4');\n\n// 具体的目标\nconst concreteSuject1 = new Suject();\nconst concreteSuject2 = new Suject();\n\n// 具体的对应关系\nconcreteSuject1.addObserver(concreteObservver1);\nconcreteSuject1.addObserver(concreteObservver2);\n\n// 具体的对应关系\nconcreteSuject2.addObserver(concreteObservver3);\nconcreteSuject2.addObserver(concreteObservver4);\n\nconst data = {name: '萌萌哒草头将军', age: 18}\n\n// 当data的name属性变化，对应的观察者concreteObservver1、\n// concreteObservver2就会被广播事件通知，从而更新\nObject.defineProperty(data, 'name', {\n    get: () => this.name,\n    set: (newValue) => {\n        concreteSuject1.notify();\n        this.name = newValue;\n    }\n})\n\n// 当data的age属性变化，对应的观察者concreteObservver3、\n// concreteObservver4就会被广播事件通知，从而更新\nObject.defineProperty(data, 'age', {\n    get: () => this.age,\n    set: (newValue) => {\n        concreteSuject2.notify();\n        this.age = newValue;\n    }\n})\n\ndata.name = 'mmdctjj'\n// 我是： concreteObservver1 我知道我该更新了\n// 我是： concreteObservver2 我知道我该更新了\ndata.age = 18\n// 我是： concreteObservver3 我知道我该更新了\n// 我是： concreteObservver4 我知道我该更新了\n")])])]),n("p",[e._v("如果"),n("code",[e._v("Observer")]),e._v("的"),n("code",[e._v("update")]),e._v("方法里是跟新对应的"),n("code",[e._v("dom")]),e._v("，那恭喜你，这和"),n("code",[e._v("vue")]),e._v("的基思路理是一样的了")]),e._v(" "),n("h3",{attrs:{id:"发布-订阅模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#发布-订阅模式"}},[e._v("#")]),e._v(" 发布/订阅模式")]),e._v(" "),n("p",[e._v("虽然观察者模式可以轻松实现发布订阅模式的功能，但是观察者模式使得"),n("code",[e._v("concreteSuject")]),e._v("和"),n("code",[e._v("concreteObservver")]),e._v("耦合在了一起，对于复杂的系统，解耦才能算得上是优秀的系统。")]),e._v(" "),n("p",[n("code",[e._v("发布/订阅者模式（Public/Subscribe）")]),e._v("，可以很好的解决观察者模式耦合问题，那么它是怎么解耦的呢？")]),e._v(" "),n("p",[n("code",[e._v("发布/订阅模式")]),e._v("提供了"),n("code",[e._v("主题/事件通道(Topic/event Channer)")]),e._v("，，订阅者通过"),n("code",[e._v("Subscribe")]),e._v("功能和"),n("code",[e._v("topic")]),e._v("绑定，当发布者发生变化时，将所有的变更通过"),n("code",[e._v("event")]),e._v("广播给所有订阅该"),n("code",[e._v("topic")]),e._v("的订阅者们。这样就将发布者和订阅者完全隔离开了")]),e._v(" "),n("p",[e._v("还是上面的例子，我们用"),n("code",[e._v("发布/订阅模式")]),e._v("实现")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class PubSub {\n    constructor() {\n        this.topics = {}\n        this.uuid = 0 // 每个订阅者的唯一标识，可以随时取消订阅\n    }\n    // 发布器\n    publish(topic, value) {\n        if (this.topics[topic]) {\n            this.topics[topic].map(({ event }) => event(value))\n        }\n    }\n    // 订阅器\n    subscribe(topic, event) {\n        const uuid = this.uuid++\n        this.topics[topic] = this.topics[topic]\n            ? [...this.topics[topic], { event, uuid }]\n            : [{ event, uuid }]\n        return uuid\n    }\n}\n\nconst MyPubSub = (function () {\n    let instance;\n    function init() {\n        return new PubSub();\n    }\n\n    return function () {\n        if (!instance) {\n            instance = init();\n        }\n        return instance;\n    }\n})()\n\nconst myPubSub = new MyPubSub()\n\nconst data = { name: '萌萌哒草头将军', age: 18 }\n\nmyPubSub.subscribe('data.name', (value) => console.log(\n    '我知道',\n    'name发生变化了:',\n    value\n))\nmyPubSub.subscribe('data.name', (value) => console.log(\n    '我也知道',\n    'name发生变化了:',\n    value\n))\nmyPubSub.subscribe('data.age', (value) => console.log('我知道', 'age发生变化了:', value))\n\nObject.defineProperty(data, 'name', {\n    get: () => this.name,\n    set: (newValue) => {\n        myPubSub.publish('data.name', newValue)\n        this.name = newValue;\n    }\n})\n\nObject.defineProperty(data, 'age', {\n    get: () => this.age,\n    set: (newValue) => {\n        myPubSub.publish('data.age', newValue)\n        this.age = newValue;\n    }\n})\n\ndata.name = 'mmdctjj'\n// 我知道 name发生变化了: mmdctjj\n// 我也知道 name发生变化了: mmdctjj\ndata.age = 18\n// 我知道 age发生变化了: 18\n\n")])])]),n("p",[n("code",[e._v("jauery")]),e._v("的实现了标准的发布订阅模式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$.trigger('login', {userName: 'MMDCTJJ', password: '*******'})\n$.on('login', (userInfo) => console.log(userInfo))\n")])])]),n("p",[n("code",[e._v("vue")]),e._v("中，可以使用"),n("code",[e._v("$emit")]),e._v("方法和"),n("code",[e._v("$on")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<button @click="$emit(\'increaseBy\', 1)"> Increase by 1 </button>\n<MyButton @increase-by="(n) => count += n" />\n')])])]),n("h3",{attrs:{id:"中介者模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式"}},[e._v("#")]),e._v(" 中介者模式")]),e._v(" "),n("p",[e._v("中介者模式也和观察者类似，中介者模式由"),n("code",[e._v("中介者")]),e._v("和"),n("code",[e._v("订阅者")]),e._v("组成\n所有的订阅者们不能互相沟通，必须通过中介者同步信息。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const mediator = (function () {\n    let topics = [], uuid = 0;\n\n    function subscribe (topic, callback) {\n        uuid ++\n        topics[topic] = topics[topic]\n            ? [...topics[topic], { callback, uuid }]\n            : [{ callback, uuid }]\n    }\n\n    function publish (topic, value) {\n\n        if (topics[topic]) {\n            topics[topic].map(item => item.callback(value))\n        }\n    }\n    return {\n        install: function (obj) {\n            obj.uuid = uuid\n            obj.publish = publish\n            obj.subscribe = subscribe\n            return obj\n        } \n    }\n})()\n\nconst subscribe1 = mediator.install({})\nconst subscribe2 = mediator.install({})\nconst subscribe3 = mediator.install({})\n\nsubscribe1.subscribe('data.name', (value) => console.log('我是subscribe1', value))\nsubscribe2.subscribe('data.name', (value) => console.log('我是subscribe3', value))\n\nconst data = { name: '萌萌哒草头将军', age: 18 }\n\nObject.defineProperty(data, 'name', {\n    get: () => this.name,\n    set: (newValue) => {\n        subscribe3.publish('data.name', newValue)\n        this.name = newValue;\n    }\n})\n\ndata.name = 'mmdctjj'\n// 我是subscribe1 mmdctjj\n// 我是subscribe3 mmdctjj\n")])])]),n("h3",{attrs:{id:"策略模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[e._v("#")]),e._v(" 策略模式")]),e._v(" "),n("p",[e._v("策略模式可以在不同的时机，采用不同的策略解决开发中的问题")]),e._v(" "),n("p",[e._v("相信你经常遇到同事这样的代码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// bad\nlet arr = [1, 2, 3]\narr.map(a => {\n    if (a === 1) {\n        console.log('11')\n    } else if (a === 2) {\n        console.log('22')\n    } else if (a === 3) {\n        console.log('33')\n    }\n})\n\n")])])]),n("p",[e._v("这种如果需要优化，可以使用策略模式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Strategy {\n    constructor() {\n        this.strategy = {} // JavaScript的策略模式可以通过对象来巧妙实现\n    }\n\n    addStrategy(name, callback) {\n        this.strategy[name] = callback\n    }\n\n    execute(name, args) {\n        this.strategy[name]?.(args)\n    }\n}\n\n// good\nlet arr = [1, 2, 3]\n\nconst strategy = new Strategy()\n\nstrategy.addStrategy(1, () => console.log(11))\nstrategy.addStrategy(2, () => console.log(22))\nstrategy.addStrategy(3, () => console.log(33))\n\narr.map(a => strategy.execute(a, 'your args'))\n")])])]),n("h3",{attrs:{id:"装饰器模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式"}},[e._v("#")]),e._v(" 装饰器模式")]),e._v(" "),n("p",[n("code",[e._v("装饰器模式(Decorater)")]),e._v("，主要通过扩展已有的类增加新功能，它不会修改底层代码，是一种对象子类继承的替代方案")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class YourClass {\n    constructor () {\n        this.number = 0\n    }\n    count () {\n        this.number ++\n        return this.number\n    }\n}\n\nclass Decorater {\n    constructor (other) {\n        this.number = other.number + 66\n    }\n    count () {\n        this.number = this.number + 100\n        return this.number\n    }\n}\n\nconst yourClass = new YourClass()\nconst decorater = new Decorater(yourClass)\n\nconsole.log(yourClass.count(), 'yourClass') // 1\nconsole.log(decorater.count(), 'decorater') // 166\nconsole.log(yourClass.count(), 'yourClass') // 2\nconsole.log(decorater.count(), 'decorater') // 266\n")])])]),n("p",[e._v("好了，今天先分享到这里了，欢迎指正")])])}),[],!1,null,null,null);n.default=s.exports}}]);